
    
    model {
    
    #### Priors ####
    
    beta.psi ~ dnorm(0,0.386)
    beta.r ~ dnorm(0,0.386)
    alpha.psi ~ dnorm(0,0.386)
    alpha.r ~ dnorm(0,0.386)
    gamma.psi ~ dnorm(0,0.386)
    gamma.r ~ dnorm(0,0.386)
    
    p2 ~ dunif(0,1)
    p3[1:3] ~ ddirch(alpha.p3[1:3])
    for (i in 1:3){
    alpha.p3[i] <- 1
    }
    
    
    #### Likelihood ####
    
    ## states-space model ##
    
    # First year:
    for (i in 1:S){
    logit(mu.psi[i,1]) <- alpha.psi + beta.psi*seaice[i]
    logit(mu.r[i,1]) <- alpha.r + beta.r*seaice[i]
    z1[i,1] ~ dbin(mu.psi[i,1], 1)
    z2[i,1] ~ dbin(mu.r[i,1]*z1[i,1], 1)
    z[i,1] <- c(1-max(z1[i,1], z2[i,1]),
    z1[i,1]-z2[i,1],
    z2[i,1]
    ) %*% c(1,2,3)
    }
    
    # Subsequent years:
    for (i in 1:S){
    for (j in 2:Y){
    logit(mu.psi[i,j]) <- alpha.psi +
    beta.psi*seaice[i] +
    gamma.psi*z1[i,j-1]
    logit(mu.r[i,j]) <- alpha.r + 
    beta.r*seaice[i] + 
    gamma.r*z2[i,j-1]
    z1[i,j] ~ dbin(mu.psi[i,j], 1)
    z2[i,j] ~ dbin(mu.r[i,j]*z1[i,j], 1)
    z[i,j] <- c(1-max(z1[i,j], z2[i,j]),
    z1[i,j]-z2[i,j],
    z2[i,j]
    ) %*% c(1,2,3)
    }
    }
    
    
    
    ## observation model ##
    
    # Define observation matrix
    
    p[1,1] <- 1
    p[1,2] <- 0
    p[1,3] <- 0
    p[2,1] <- 1-p2
    p[2,2] <- p2
    p[2,3] <- 0
    p[3,1] <- p3[1]
    p[3,2] <- p3[2]
    p[3,3] <- p3[3]
    
    
    for (i in 1:S){
    for (j in 1:Y){
    for (k in 1:V){
    y[i,j,k] ~ dcat(p[z[i,j],])
    y.new[i,j,k] ~ dcat(p[z[i,j],]) # for posterior predictive check
    }
    }
    }
    
    
    #### Derived values ####
    
    ## phi = the probability of being in each state
    for (i in 1:S) {
    for (j in 1:Y) {
    phi[i,j,1] <- 1 - mu.psi[i,j]
    phi[i,j,2] <- mu.psi[i,j] * (1 - mu.r[i,j])
    phi[i,j,3] <- mu.psi[i,j] * mu.r[i,j]
    }
    }
    
    ## eval = the probability of recording each state
    for (i in 1:S) {
    for (j in 1:Y) {
    eval[i,j,1] <- (phi[i,j,1] * 1) + 
    (phi[i,j,2] * (1 - p2)) + 
    (phi[i,j,3] * p3[1])
    eval[i,j,2] <- (phi[i,j,1] * 0) + 
    (phi[i,j,2] * p2) + 
    (phi[i,j,3] * p3[2])
    eval[i,j,3] <- (phi[i,j,1] * 0) + 
    (phi[i,j,2] * 0) + 
    (phi[i,j,3] * p3[3])
    }
    }
    
    
    
    }
